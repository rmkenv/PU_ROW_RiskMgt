[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "row-risk-manager"
version = "1.0.0"
authors = [
    {name = "ROW Risk Management Team", email = "support@row-risk-manager.org"},
]
description = "Comprehensive Python workflow for power utility ROW risk management"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Other Audience",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Scientific/Engineering :: Information Analysis", 
    "Topic :: Utilities",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
keywords = [
    "utility", "power", "transmission", "right-of-way", "ROW",
    "vegetation", "risk", "assessment", "satellite", "lidar",
    "GIS", "remote-sensing", "NDVI", "canopy-height",
    "wildfire", "flood", "landslide", "NERC", "FAC-003"
]
dependencies = [
    "geopandas>=0.13.0",
    "rasterio>=1.3.6",
    "shapely>=2.0.0",
    "fiona>=1.9.0",
    "pyproj>=3.5.0",
    "earthpy>=0.9.4",
    "rasterstats>=0.19.0",
    "scikit-learn>=1.2.0",
    "xgboost>=1.7.0",
    "pandas>=1.5.0",
    "numpy>=1.24.0",
    "folium>=0.14.0",
    "plotly>=5.13.0",
    "requests>=2.28.0",
    "click>=8.1.0",
    "pyyaml>=6.0",
    "tqdm>=4.64.0",
    "loguru>=0.6.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.2.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.1.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "pylint>=2.16.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0"
]
docs = [
    "sphinx>=6.1.0",
    "sphinx-rtd-theme>=1.2.0",
    "nbsphinx>=0.8.12",
    "sphinx-autodoc-typehints>=1.22.0"
]
notebook = [
    "jupyter>=1.0.0",
    "jupyterlab>=3.6.0",
    "ipykernel>=6.21.0",
    "ipywidgets>=8.0.0"
]
lidar = [
    "laspy>=2.4.0",
    "pdal>=3.2.0",
    "whitebox>=2.3.0",
    "pyntcloud>=0.3.1"
]
satellite = [
    "sentinel-sat>=1.1.1",
    "landsat-util>=0.12.0",
    "rioxarray>=0.15.0",
    "xarray>=2023.1.0"
]
visualization = [
    "streamlit>=1.20.0",
    "dash>=2.8.0",
    "bokeh>=3.0.0",
    "contextily>=1.3.0",
    "holoviews>=1.16.0"
]
ml = [
    "lightgbm>=3.3.5",
    "statsmodels>=0.13.5",
    "cvxpy>=1.3.0"
]
cloud = [
    "boto3>=1.26.0",
    "azure-storage-blob>=12.14.0",
    "google-cloud-core>=2.3.0"
]

[project.urls]
Homepage = "https://github.com/yourusername/power-utility-row-risk-management"
Documentation = "https://row-risk-manager.readthedocs.io"
Repository = "https://github.com/yourusername/power-utility-row-risk-management.git"
"Bug Tracker" = "https://github.com/yourusername/power-utility-row-risk-management/issues"
Changelog = "https://github.com/yourusername/power-utility-row-risk-management/blob/main/CHANGELOG.md"

[project.scripts]
row-risk-assess = "row_risk_manager.cli:main"
row-download-data = "row_risk_manager.data_acquisition:download_cli"
row-analyze-vegetation = "row_risk_manager.vegetation_analysis:analyze_cli"
row-assess-risk = "row_risk_manager.risk_assessment:assess_cli"
row-generate-report = "row_risk_manager.reporting:report_cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["row_risk_manager*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
row_risk_manager = [
    "data/*.json",
    "configs/*.json",
    "templates/*.html",
    "static/css/*.css",
    "static/js/*.js"
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
    "network: marks tests that require network access"
]

# Coverage configuration
[tool.coverage.run]
source = ["row_risk_manager"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/site-packages/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]
show_missing = true
skip_covered = false
precision = 2

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "geopandas.*",
    "rasterio.*",
    "earthpy.*",
    "rasterstats.*",
    "folium.*",
    "laspy.*",
    "pdal.*"
]
ignore_missing_imports = true